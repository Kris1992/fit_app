{% extends 'base.html.twig' %}

{% block title %}Add Workout{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-datetimepicker/2.5.20/jquery.datetimepicker.min.css">
    <link rel="stylesheet" href="{{ asset('css/_login.css') }}">
{% endblock %}
{% block content %}

<section class="addWorkout">
	<div class="container">
		<div class="row">
	      	<div class="col-sm-12 mx-auto">
		        <div class="card card-signin my-5 shadow-box">
                    <div class="row m-1">
                        <div class="col-12">
                            <h2 class="text-green text-center">Draw route on map</h2>
                        </div>
                        
                        <div class="col-sm-12 col-md-8">
                            <div style="width: 100%; height: 480px" id="mapContainer"></div>
                        </div>
                        <div class="col-sm-12 col-md-4">
                            <div id="mapPanel">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="marker_mode">
                                    <label class="form-check-label" for="marker_mode">Put marker after click</label>
                                </div>
                            </div>
                        </div>  
                    </div>
                    
		        </div>
	      	</div>
	    </div>
    </div>
</section>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
<script src="https://js.api.here.com/v3/3.1/mapsjs-core.js" type="text/javascript" charset="utf-8"></script>
<script src="https://js.api.here.com/v3/3.1/mapsjs-service.js" type="text/javascript" charset="utf-8"></script>
<script src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js" type="text/javascript" charset="utf-8"></script>
<script type="text/javascript">
    window.apikey = {{ map_api_key|json_encode|raw }};
</script>
<script src="{{ asset('js/_mapDraw.js') }}" type="text/javascript"></script>






<script type="text/javascript">
/*
    // Instantiate a map and platform object:
var platform = new H.service.Platform({
  'apikey': window.apikey
});
// Retrieve the target element for the map:
var targetElement = document.getElementById('mapContainer');

// Get the default map types from the platform object:
var defaultLayers = platform.createDefaultLayers();
loadMap();

function loadMap(){
    // Instantiate the map:
    var map = new H.Map(
  document.getElementById('mapContainer'),
  defaultLayers.vector.normal.map,
  {
    zoom: 10,
    center: { lat: 52.51, lng: 13.4 }
  });
}

// Create the parameters for the routing request:
//var routingParameters = {
  // The routing mode:
//  'mode': 'fastest;car',
  // The start point of the route:
//  'waypoint0': 'geo!50.1120423728813,8.68340740740811',
  // The end point of the route:
//  'waypoint1': 'geo!52.5309916298853,13.3846220493377',
  // To retrieve the shape of the route we choose the route
  // representation mode 'display'
//  'representation': 'display'
//};

// Define a callback function to process the routing response:
var onResult = function(result) {
  var route,
    routeShape,
    startPoint,
    endPoint,
    linestring;
  if(result.response.route) {
  // Pick the first route from the response:
  route = result.response.route[0];
  // Pick the route's shape:
  routeShape = route.shape;

  // Create a linestring to use as a point source for the route line
  linestring = new H.geo.LineString();

  // Push all the points in the shape into the linestring:
  routeShape.forEach(function(point) {
    var parts = point.split(',');
    linestring.pushLatLngAlt(parts[0], parts[1]);
  });

  // Retrieve the mapped positions of the requested waypoints:
  startPoint = route.waypoint[0].mappedPosition;
  endPoint = route.waypoint[1].mappedPosition;

  // Create a polyline to display the route:
  var routeLine = new H.map.Polyline(linestring, {
    style: { strokeColor: 'blue', lineWidth: 3 }
  });

  // Create a marker for the start point:
  var startMarker = new H.map.Marker({
    lat: startPoint.latitude,
    lng: startPoint.longitude
  });

  // Create a marker for the end point:
  var endMarker = new H.map.Marker({
    lat: endPoint.latitude,
    lng: endPoint.longitude
  });

  // Add the route polyline and the two markers to the map:
  map.addObjects([routeLine, startMarker, endMarker]);

  // Set the map's viewport to make the whole route visible:
  map.getViewModel().setLookAtData({bounds: routeLine.getBoundingBox()});
  }
};

var routingParameters = {
  // The routing mode:
  'mode': 'fastest;car',
  // The start point of the route:
  'waypoint0': 'geo!50.1120423728813,8.68340740740811',
  // The end point of the route:
  'waypoint1': 'geo!52.5309916298853,13.3846220493377',
  // To retrieve the shape of the route we choose the route
  // representation mode 'display'
  'representation': 'display'
};

    var routingService = platform.getRoutingService();
    routingService.calculateRoute(routingParameters, success => {
        console.log(success);
    });
// Get an instance of the routing service:
/*var router = platform.getRoutingService();

// Call calculateRoute() with the routing parameters,
// the callback and an error callback function (called if a
// communication error occurs):
router.calculateRoute(routingParameters, success => {
    console.log(success);
},
  function(error) {
    alert(error.message);
  });*/
</script>




<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-datetimepicker/2.5.20/jquery.datetimepicker.full.min.js"></script>
<script>
$(document).ready(function() {
    $('.js-datepicker').datetimepicker({
        format:'Y-m-d H:i'
    });
});
</script>
{% endblock %}